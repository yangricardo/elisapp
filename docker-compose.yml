# File structure version
version: '3.7'

services:
  # Database based on official postgres image
  db:
    restart: always
    image: postgres
    container_name: elisapp_postgres
    hostname: db
    ports:
      - 5432:5432
    env_file:  # <-- we use the previously defined values
      - config/db/.env
    networks:  # <-- connect to the bridge
      - db_network
    volumes:
      - db_volume:/var/lib/postgresql/data

  redis:
    restart: always
    container_name: elisapp_redis
    hostname: redis
    image: redis
    expose:
      - 6379
    networks: 
      - db_network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks: 
      - db_network

  # rabbitmq:
  #   restart: always
  #   hostname: rabbitmq
  #   container_name: elisapp_rabbit
  #   image: rabbitmq:3-management
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=elisdbadmin
  #     - RABBITMQ_DEFAULT_PASS=elisdbpassword
  #   ports:
  #     - 4369:4369
  #     - 5672:5672
  #     - 15672:15672
  #     - 5671:5671
  #     - 25672:25672
  #   networks: 
  #     - db_network
  #   depends_on:
  #     - redis

  app:
    restart: always
    build:
      context: .
    container_name: elisapp_app
    image: yangricardo/elisapp:latest
    command: sh /config/on-container-start.sh
    hostname: app
    env_file:
      - config/app/.env
    volumes:
      - ./app:/app
      # - /Users/yangricardo/TJ_FILES/:/tj_files
      - ${HOME}/TJ_FILES:/tj_files
      - static:/srv/static
      - media:/srv/media
    expose:
      - 8000
      - 8001
      - 8002
    ports:
      - 8888:8888
      - 3500:3500
      - 9000:9000
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      nginx_network:
          ipv4_address: 172.16.1.2
      # - nginx-proxy
      db_network:
    depends_on:
      - db
      - redis

  # worker:
  #   build:
  #     context: .
  #   container_name: elisapp_celery
  #   image: yangricardo/elisapp:latest
  #   command: celery -A backend worker -E -l info
  #   volumes:
  #     - ./app:/app
  #   ports:
  #     - 5555:5555
  #   depends_on:
  #     - app
  #     - rabbitmq
  #   networks: 
  #     - db_network

  # Web server based on official nginx image
  # Connect external 8000 (which you can access from browser)
  # with internal port 8000(which will be linked to app port 8000 in configs)
  # Connect local nginx configuration with image configuration
  nginx:
    image: nginx
    container_name: elisapp_nginx
    restart:  always
    hostname: nginx
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - 80:80
      - 443:443
    dns:
      - 8.8.8.8
      - 8.8.4.4
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      # - ./config/nginx/certbot/conf:/etc/letsencrypt
      # - ./config/nginx/certbot/www:/var/www/certbot
      - ./config/nginx/elisapp.dev.crt:/etc/nginx/elisapp.dev.crt # New Line!
      - ./config/nginx/elisapp.dev.key:/etc/nginx/elisapp.dev.key # New Line!
      - static:/srv/static:ro
      - media:/srv/media:ro
    depends_on:
      - app
    networks: 
      nginx_network:
        ipv4_address: 172.16.1.3
 
  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./config/nginx/certbot/conf:/etc/letsencrypt
  #     - ./config/nginx/certbot/www:/var/www/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  pgadmin:
    image: dpage/pgadmin4
    restart:  always
    hostname: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: 'yangricardo17@gmail.com'
      PGADMIN_DEFAULT_PASSWORD: 'elisdbpassword'
    ports:
      - 8001:80
    depends_on:
      - db
    networks: 
      - db_network

networks:
  nginx_network:
    external:
      name: elisapp_nginx_network
        

  db_network:  # <-- add the bridge
    driver: bridge

volumes:
  db_volume:
  static:
  media: